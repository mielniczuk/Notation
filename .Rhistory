segplot <- function(tree) {
if (is.null(tree)) return()
segments(tree$x0,tree$y0,tree$x1,tree$y1,
col=tree$col,
lwd=tree$lwd)
segplot(tree$branch1)
segplot(tree$branch2)
segplot(tree$extend)
}
#segplot(part)
grow <- function(tree) {
if (is.null(tree) ) return(NULL)
tree$lwd=tree$lwd*1.2
if (tree$lwd>2.5) tree$col <- 'brown'
if (is.null(tree$extend)) {
tree$extend <- list(
x0=tree$x1,
y0=tree$y1,
x1=rnorm(1,1,.03)*(2*tree$x1-tree$x0),
y1=(rnorm(1,.98,.02)+.02*(tree$x1==tree$x0))*(2*tree$y1-tree$y0),
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
length=sqrt((tree$x1-tree$x0)^2 + (tree$y1-tree$y0)^2)
angle <- asin((tree$x1-tree$x0)/length)
branch <- list(
x0=(tree$x1+tree$x0)/2,
y0=(tree$y1+tree$y0)/2,
branch1=NULL,
branch2=NULL,
extend=NULL,
lwd=1,
depth=tree$depth,
col=tree$col
)
shift <- rnorm(2,.5,.1)
branch$x0 <- shift[1]*tree$x1+(1-shift[1])*tree$x0
branch$y0 <- shift[1]*tree$y1+(1-shift[1])*tree$y0
length=length*rnorm(1,.5,.05)
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle+co)*length
branch$y1 <- branch$y0+cos(angle+co)*length
tree$branch1 <- branch
branch$x0 <- shift[2]*tree$x1+(1-shift[2])*tree$x0
branch$y0 <- shift[2]*tree$y1+(1-shift[2])*tree$y0
co <- runif(1,.35,.45)
branch$x1 <- branch$x0+sin(angle-co)*length
branch$y1 <- branch$y0+cos(angle-co)*length
tree$branch2 <- branch
} else {
tree$branch1 <- grow(tree$branch1)
tree$branch2 <- grow(tree$branch2)
tree$extend <- grow(tree$extend)
}
tree$depth <- tree$depth+1
if (tree$depth>2)  tree$col <- 'green'
if (tree$depth>4)  tree$col <- 'darkgreen'
if (tree$depth>6)  tree$col <- 'brown'
tree
}
tree <- part
for (i in 1:9) tree <- grow(tree)
par(mar=c(0,0,0,0))
plot(x=c(-3,3),y=c(0,9),type='n',axes=FALSE,xlab='',ylab='')
segplot(tree)
#Add some ornaments
# star created by pch plotting character; cex expands size; lwd is line width
# x = 0 is tree trunk; y = 8 is top of tree
points(0,8,pch=8,cex=5,col="gold",lwd=3)
# the challenge here is that x and y must be equal; tree is inverted cone shape
# runif(vector, probability min, max);
#rep(number, times)
#
points(x=runif(4,-1,1),y=rep(1,4),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=10)
points(x=runif(4,-1,1),y=rep(1.25,4),col=sample(c("blue","red"),size=4,replace=T),cex=2,pch=19)
points(x=runif(4,-1,1),y=rep(1.5,4),col=sample(c("blue","red"),size=4,replace=T),cex=2,pch=11)
points(x=runif(4,-1,1),y=rep(1.75,4),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=21)
points(x=runif(3.5,-1.5,1.25),y=rep(1.9,3.5),col=sample(c("blue","gold"),size=4,replace=T),cex=3,pch=19)
points(x=runif(4,-1.6,1.35),y=rep(2.2,4),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=19)
#
points(x=runif(6,-1.6,1.5),y=rep(2.75,6),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=19)
points(x=runif(5,-1.4,1.6),y=rep(3.0,5),col=sample(c("blue","gold"),size=4,replace=T),cex=3,pch=20)
points(x=runif(4,-1.3,1.5),y=rep(3.2,4),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=19)
#
points(x=runif(4,-1.25,1.5),y=rep(3.75,4),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=19)
points(x=runif(4,-1.15,1.4),y=rep(4.0,4),col=sample(c("blue","gold"),size=4,replace=T),cex=3,pch=20)
points(x=runif(3,-1.1,1.3),y=rep(4.2,3),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=10)
points(x=runif(3,-1.1,1.2),y=rep(4.75,3),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=19)
#
points(x=runif(4,-1.1,1.15),y=rep(5,4),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=19)
points(x=runif(4,-1,1.0),y=rep(6,4),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=19)
points(x=runif(3,-1,.75),y=rep(6.25,3),col=sample(c("blue","red"),size=4,replace=T),cex=3,pch=21)
# three levels above, like in R-Explore/learn/, use ../../css/custom.css
options(rstudio.markdownToHTML =
function(inputFile, outputFile) {
require(markdown)
markdownToHTML(inputFile, outputFile, stylesheet='../../../css/custom.css')
}
)
# Same level directory - use css/custom.css
options(rstudio.markdownToHTML =
function(inputFile, outputFile) {
require(markdown)
markdownToHTML(inputFile, outputFile, stylesheet='css/custom.css')
}
)
install.packages("rmarkdown")
system.file("rmarkdown/templates/html_vignette", package="rmarkdown")
options(rstudio.markdownToHTML =
function(inputFile, outputFile) {
require(markdown)
markdownToHTML(inputFile, outputFile, stylesheet='css/custom.css')
}
)
system.file("reports/styles.css", package = "mypackage")
system.file("custom.css", package = "notepage")
quarterly_report <- function(toc = TRUE) {
# get the locations of resource files located within the package
css <- system.file("reports/styles.css", package = "mypackage")
header <- system.file("reports/quarterly/header.html", package = "mypackage")
rmarkdown::html_document(toc = toc,
fig_width = 6.5,
fig_height = 4,
theme = NULL,
css = css,
includes = includes(before_body = header))
}
simple_html_format <- function() {
require(rmarkdown)
output_format(knitr = knitr_options(opts_chunk = list(dev = 'png')),
pandoc = pandoc_options(to = "html"),
clean_supporting = FALSE)
}
simple_html_format
simple_html_format::test
simple_html_format('test')
html_note <- function(fig_width = 3,
fig_height = 3,
css = NULL,
...) {
if (is.null(css)) {
css <- system.file("rmarkdown", "templates", "html_note" ,"skeleton",
"custom.css", package = "rmarkdown")
}
html_document(fig_width = fig_width,
fig_height = fig_height,
fig_retina = FALSE,
css = css,
theme = NULL,
highlight = "pygments",
...)
}
html_note
rmarkdown::html_note
rmarkdown::html_note
html_note <- function(fig_width = 3,
fig_height = 3,
css = NULL,
...) {
if (is.null(css)) {
css <- system.file("rmarkdown", "templates", "html_note" ,"skeleton",
"custom.css", package = "rmarkdown")
}
html_document(fig_width = fig_width,
fig_height = fig_height,
fig_retina = FALSE,
css = css,
theme = NULL,
highlight = "pygments",
...)
}
rmarkdown::html_note
rmarkdown::draft('test.Rmd', template = 'html_note', package = 'markdown'
)
rmarkdown::draft('test.Rmd', template = 'note_html', package = 'markdown')
rmarkdown::draft('test.Rmd', template = 'notepage', package = 'markdown')
rmarkdown::draft('test.Rmd', template = 'html_document', package = 'markdown')
rmarkdown::draft('test.Rmd', template = 'html_document', package = 'rmarkdown')
rmarkdown::draft('test.Rmd', template = 'html_note', package = 'rmarkdown')
rmarkdown::draft('test2.Rmd', template = 'html_note', package = 'rmarkdown')
rmarkdown::draft('test3.Rmd', template = 'html_note', package = 'rmarkdown')
rmarkdown::draft('test2.Rmd', template = 'html_note', package = 'rmarkdown')
rmarkdown::draft('test3.Rmd', template = 'html_note', package = 'rmarkdown')
rmarkdown::draft('test3.Rmd', template = 'html_note', package = 'rmarkdown')
draft('test1.Rmd', template = 'html_note', package = 'rmarkdown')
library(rmarkdown)
draft('test1.Rmd', template = 'html_note', package = 'rmarkdown')
draft('test1.Rmd', template = 'html_note', package = 'rmarkdown')
draft('test2.Rmd', template = 'html_note', package = 'rmarkdown')
toc: true
library(stats)
library(evaluate)
library(grDevices)
library(grDevices)
setwd("D:/Documents/OneDrive/Notes/Program/Notation")
plot(1,1, main=expression( A[2]~and~B[2] )
)
plot(1,1, main=expression( A[2] and B[2] ))
?plot
plot(0,0, main=expression( A[2]~and~B[2] )
)
plot.new()
plot(main=expression( A[2]~and~B[2]))
plot.window(c(0,10), c(10,0),  # x & y axes 0 to 10, y revers hi 2 lo
main=expression(A[2]~and~B[2]))
box(lty = 'solid', col = 'red')
main=expression( A[2]~and~B[2] )
main=expression(A[2]~and~B[2])
demo(plotmath)
plot.new(); plot.window(c(0,10), c(10,0))
text(1, 1, c('x with a circumflex', expression(hat(x)) )
)
plot.new(); plot.window(c(0,10), c(10,0))
text(1, 1, expression('x with a circumflex ' hat(x))))
plot.new(); plot.window(c(0,10), c(10,0))
text(1, 1, expression('x with a circumflex ' hat(x)))
plot.new(); plot.window(c(0,10), c(10,0))
text(1, 1, expression('x with a circumflex ' hat(x)))
plot.new(); plot.window(c(0,10), c(10,0))
text(1, 1, expression('x with a circumflex ' * hat(x)))
plot.new(); plot.window(c(0,10), c(10,0))
text(1, 3, expression('x with a circumflex ' * hat(x)))
plot.new(); plot.window(c(0,10), c(10,0))
text(3, 3, expression('x with a circumflex ' * hat(x)))
plot.new(); plot.window(c(0,10), c(10,0))
text(3, 3, expression('x with a circumflex '  hat(x)))
plot.new(); plot.window(c(0,10), c(10,0))
text(3, 3, expression('x with a circumflex ' = hat(x)))
plot.new(); plot.window(c(0,10), c(10,0))
text(3, 3, expression('x with a circumflex '* hat(x)))
plot.new(); plot.window(c(0,10), c(10,0))
text(3, 3, expression('x with a circumflex '* hat(x), cex = 1.2))
plot.new(); plot.window(c(0,10), c(10,0))
text(3, 3, expression('x with a circumflex '* hat(x)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(3, 1, expression('x with a circumflex '* hat(x)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(3, 1, expression('x with a circumflex '* hat(x)), cex = 1.2)
text(3, 2, expression('x with a tilde  '* tilde(x)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(3, 1, expression('x with a circumflex '* hat(x)), cex = 1.2)
text(4, 2, expression('x with a tilde  '* tilde(x)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(3, 1, expression('x with a circumflex '* hat(x)), cex = 1.2)
text(4, 2.25, expression('x with a tilde  '* tilde(x)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(3, 1, expression('x with a circumflex '* hat(x)), cex = 1.2)
text(4, 2.25, expression('x with a tilde  '* tilde(x)), cex = 1.2)
text(4, 3.5, expression('x with dot  '* dot(x)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(3, 1, expression('x with a circumflex '* hat(x)), cex = 1.2)
text(4, 2.25, expression('x with a tilde  '* tilde(x)), cex = 1.2)
text(5, 3.5, expression('x with dot  '* dot(x)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(3, 1, expression('x with a circumflex '* hat(x)), cex = 1.2)
text(4, 2.25, expression('x with a tilde  '* tilde(x)), cex = 1.2)
text(4.5, 3.5, expression('x with dot  '* dot(x)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(3, 1, expression('x with a circumflex '* hat(x)), cex = 1.2)
text(4, 2.25, expression('x with a tilde  '* tilde(x)), cex = 1.2)
text(4.5, 3.5, expression('x with a dot  '* dot(x)), cex = 1.2)
text(5.5, 3.5, expression('x with a ring  '* ring(x)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(3, 1, expression('x with a circumflex '* hat(x)), cex = 1.2)
text(4, 2.25, expression('x with a tilde  '* tilde(x)), cex = 1.2)
text(4.5, 3.5, expression('x with a dot  '* dot(x)), cex = 1.2)
text(5, 4.25, expression('x with a ring  '* ring(x)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(3, 1, expression('x with a circumflex '* hat(x)), cex = 1.2)
text(4, 2.25, expression('x with a tilde  '* tilde(x)), cex = 1.2)
text(4.5, 3.5, expression('x with a dot  '* dot(x)), cex = 1.2)
text(4.5, 4.25, expression('x with a ring  '* ring(x)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(3, 1, expression('x with a circumflex '* hat(x)), cex = 1.2)
text(4, 2.25, expression('x with a tilde  '* tilde(x)), cex = 1.2)
text(4.5, 3.5, expression('x with a dot  '* dot(x)), cex = 1.2)
text(4.5, 4.75, expression('x with a ring  '* ring(x)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(4, 1, expression('x with a circumflex '* hat(x)), cex = 1.2)
text(4, 2.25, expression('x with a tilde  '* tilde(x)), cex = 1.2)
text(4.5, 3.5, expression('x with a dot  '* dot(x)), cex = 1.2)
text(4.5, 4.75, expression('x with a ring  '* ring(x)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(4, 1, expression('x with a circumflex '* hat(x)), cex = 1.2)
text(5, 2.25, expression('x with a tilde  '* tilde(x)), cex = 1.2)
text(4.5, 3.5, expression('x with a dot  '* dot(x)), cex = 1.2)
text(4.5, 4.75, expression('x with a ring  '* ring(x)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(4, 1, expression('x with a circumflex ' * hat(x)), cex = 1.2)
text(5, 2.25, expression('x with a tilde  ' * tilde(x)), cex = 1.2)
text(5.5, 3.5, expression('x with a dot  ' * dot(x)), cex = 1.2)
text(5.5, 4.75, expression('x with a ring  ' * ring(x)), cex = 1.2)
text(5.5, 6, expression('x with a bar  ' * bar(x)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(4, 1, expression('x with a circumflex ' * hat(x)), cex = 1.2)
text(5, 2.25, expression('x with a tilde  ' * tilde(x)), cex = 1.2)
text(5.5, 3.5, expression('x with a dot  ' * dot(x)), cex = 1.2)
text(5.5, 4.75, expression('x with a ring  ' * ring(x)), cex = 1.2)
text(5.5, 6, expression('x with a bar  ' * bar(x)), cex = 1.2)
text(5.5, 7.25, expression('xy with wide circumflex  ' * widehat(xy)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(4, 1, expression('x with a circumflex ' * hat(x)), cex = 1.2)
text(5, 2.25, expression('x with a tilde  ' * tilde(x)), cex = 1.2)
text(5.5, 3.5, expression('x with a dot  ' * dot(x)), cex = 1.2)
text(5.5, 4.75, expression('x with a ring  ' * ring(x)), cex = 1.2)
text(5.5, 6, expression('x with a bar  ' * bar(x)), cex = 1.2)
text(5.5, 7.25, expression('xy with wide circumflex  ' * widehat(xy)), cex = 1.2)
text(5.5, 7.25, expression('xy with wide tilde  ' * widetilde(xy)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(4, 1, expression('x with a circumflex ' * hat(x)), cex = 1.2)
text(5, 2.25, expression('x with a tilde  ' * tilde(x)), cex = 1.2)
text(5.5, 3.5, expression('x with a dot  ' * dot(x)), cex = 1.2)
text(5.5, 4.75, expression('x with a ring  ' * ring(x)), cex = 1.2)
text(5.5, 6, expression('x with a bar  ' * bar(x)), cex = 1.2)
text(5.5, 7.25, expression('xy with wide circumflex  ' * widehat(xy)), cex = 1.2)
text(5.5, 8.5, expression('xy with wide tilde  ' * widetilde(xy)), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(4, 1, expression('x with a circumflex ' * hat(x)), cex = 1.2)
text(5, 2.25, expression('x with a tilde  ' * tilde(x)), cex = 1.2)
text(5.5, 3.5, expression('x with a dot  ' * dot(x)), cex = 1.2)
text(5.5, 4.75, expression('x with a ring  ' * ring(x)), cex = 1.2)
text(5.5, 6, expression('x with a bar  ' * bar(x)), cex = 1.2)
text(5.5, 7.25, expression('xy with wide circumflex  ' * widehat(xy)), cex = 1.2)
text(5.5, 8.5, expression('xy with wide tilde  ' * widetilde(xy)), cex = 1.2)
text(5.5, 9.75, expression('double-arrow y   ' * x %->% y), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(4, 1, expression('x with a circumflex ' * hat(x)), cex = 1.2)
text(5, 2.25, expression('x with a tilde  ' * tilde(x)), cex = 1.2)
text(5.5, 3.5, expression('x with a dot  ' * dot(x)), cex = 1.2)
text(5.5, 4.75, expression('x with a ring  ' * ring(x)), cex = 1.2)
text(5.5, 6, expression('x with a bar  ' * bar(x)), cex = 1.2)
text(5.5, 7.25, expression('xy with wide circumflex  ' * widehat(xy)), cex = 1.2)
text(5.5, 8.5, expression('xy with wide tilde  ' * widetilde(xy)), cex = 1.2)
text(5.5, 9.75, expression('x double-arrow y   ' * x %->% y), cex = 1.2)
plot.new(); plot.window(c(0,10), c(10,0))
text(4, 1, expression('x with a circumflex ' * hat(x)), cex = 1.2)
text(5, 2.25, expression('x with a tilde  ' * tilde(x)), cex = 1.2)
text(5.5, 3.5, expression('x with a dot  ' * dot(x)), cex = 1.2)
text(5.5, 4.75, expression('x with a ring  ' * ring(x)), cex = 1.2)
text(5.5, 6, expression('x with a bar  ' * bar(x)), cex = 1.2)
text(5.5, 7.25, expression('xy with wide circumflex  ' * widehat(xy)), cex = 1.2)
text(5.5, 8.5, expression('xy with wide tilde  ' * widetilde(xy)), cex = 1.2)
text(5.5, 9.75, expression('x double-arrow y   ' * x %<->% y), cex = 1.2)
plot.new(); plot.window(c(0,10), c(20,0))
text(4, 1, expression('x with a circumflex ' * hat(x)), cex = 1.2)
text(5, 2.25, expression('x with a tilde  ' * tilde(x)), cex = 1.2)
text(5.5, 3.5, expression('x with a dot  ' * dot(x)), cex = 1.2)
text(5.5, 4.75, expression('x with a ring  ' * ring(x)), cex = 1.2)
text(5.5, 6, expression('x with a bar  ' * bar(x)), cex = 1.2)
text(5.5, 7.25, expression('xy with wide circumflex  ' * widehat(xy)), cex = 1.2)
text(5.5, 8.5, expression('xy with wide tilde  ' * widetilde(xy)), cex = 1.2)
text(5.5, 9.75, expression('x double-arrow y   ' * x %<->% y), cex = 1.2)
text(5.5, 11, expression('x right-arrow y   ' * x %->% y), cex = 1.2)
plot.new(); plot.window(c(0,20), c(20,0))
text(4, 1, expression('x with a circumflex ' * hat(x)), cex = 1.2)
text(5, 2.25, expression('x with a tilde  ' * tilde(x)), cex = 1.2)
text(5.5, 3.5, expression('x with a dot  ' * dot(x)), cex = 1.2)
text(5.5, 4.75, expression('x with a ring  ' * ring(x)), cex = 1.2)
text(5.5, 6, expression('x with a bar  ' * bar(x)), cex = 1.2)
text(5.5, 7.25, expression('xy with wide circumflex  ' * widehat(xy)), cex = 1.2)
text(5.5, 8.5, expression('xy with wide tilde  ' * widetilde(xy)), cex = 1.2)
text(5.5, 9.75, expression('x double-arrow y   ' * x %<->% y), cex = 1.2)
text(5.5, 11, expression('x right-arrow y   ' * x %->% y), cex = 1.2)
setwd("D:/Documents/OneDrive/Notes/Program/Notation")
render('index.Rmd','pdf_document')
rmarkdown::render('index.Rmd','pdf_document')
getwd()
over(X[i])
-9^3
57.1-0.952
53.58/5.7
91/7
13*11
2+2/8+1+4/8+3+5/8
18/8+12/8+29/9
18+12+29
9.38-.555
262.3/.61
9.77-5.71
-4+-4
7^3
49*3
49*7
8*.25
18.79+12.39
6*.6
1.82*4.2
409.02
2*.01
9*.1
2*.1
2*.001
6/.75
26/50
13/26
13/25
5.69*8.2
69/10
190/19
6/9+5/9
11/9
.54264/57
=56/7
57/7
56/7
56/9
56/7
80
8*7
10*8
80*3
130+19
(5/9)*(1/9)
5*9
45/9
(5/9)/9
6.3544/.94
96/12
10/.5
192/(8*4)
8*7
3*1000
3200
49*1.15
.7 *63
63/7
79/2
182/13
sqrt(.28)
8*9
72/9
94/100
45/9
3*14
sqrt(200)
4*14
5*8
7*8
-7/4
4*16
92.1-88.2
91/3
91/4
91/6
91/7
-25/8
48/7
lcm(7,12)
?lcm
7*12
7*4
224/28
63/9
57/8
57/6
57/9
37/2
37/3
37/4
37/5
79/3
79/4
79/6
79/7
79/8
79/9
79/11
89/3
89/4
89/6
89/7
89/8
89/9
95/5
9*12
54/12
63/3
63/6
63/9
12*11
"%gcd%" <- function(u, v) {ifelse(u %% v != 0, v %gcd% (u%%v), v)}
"%lcm%" <- function(u, v) { abs(u*v)/(u %gcd% v)}
print (50 %lcm% 75)
"%gcd%" <- function(u, v) {ifelse(u %% v != 0, v %gcd% (u%%v), v)}
"%lcm%" <- function(u, v) { abs(u*v)/(u %gcd% v)}
print (12 %lcm% 11)
"%gcd%" <- function(u, v) {ifelse(u %% v != 0, v %gcd% (u%%v), v)}
"%lcm%" <- function(u, v) { abs(u*v)/(u %gcd% v)}
print (90 %lcm% 100)
132/12
132/11
4-(-8)
105/135
9/7 * 6/5
45/42
7*(6)
9*5
(9/7) * (6/5)
(9/7) * (5/6)
library(schoolmath)
install.packages("schoolmath")
library(schoolmath)
ver()
sessionInfo()
install.packages("KernSmooth")
library(KernSmooth)
citation()
citation("KernSmooth")
